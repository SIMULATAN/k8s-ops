alloy:
  configMap:
    content: |-
      logging {
        level = "info"
        format = "json"
        write_to = [loki.write.grafana_loki.receiver]
      }

      loki.source.kubernetes_events "cluster_events" {
        job_name = "cluster-events"
        log_format = "json"
        forward_to = [
          loki.process.cluster_events.receiver,
        ]
      }

      loki.process "cluster_events" {
        forward_to = [loki.write.grafana_loki.receiver]

        stage.static_labels {
          values = {
            cluster = "main",
          }
        }

        stage.labels {
          values = {
            kubernetes_cluster_events = "job",
          }
        }
      }

      loki.source.podlogs "kubernetes_pods_logs" {
        forward_to = [loki.relabel.podlogs_relabel.receiver]

        clustering {
          enabled = true
        }
      }

      loki.relabel "podlogs_relabel" {
        forward_to = [loki.write.grafana_loki.receiver]

        rule {
          action = "replace"
          source_labels = ["job"]
          regex = "^.+/(.+)$"
          target_label = "job"
        }
      }

      loki.write "grafana_loki" {
        endpoint {
          url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
        }
      }

      discovery.kubernetes "nodes" {
        role = "node"
      }

      discovery.kubernetes "kubernetes_nodes_cadvisor" {
        role = "node"
      }

      discovery.relabel "kubernetes_nodes_cadvisor" {
        targets = discovery.kubernetes.kubernetes_nodes_cadvisor.targets

        rule {
          action = "labelmap"
          regex  = "__meta_kubernetes_node_label_(.+)"
        }

        rule {
          target_label = "__address__"
          replacement  = "kubernetes.default.svc:443"
        }

        rule {
          source_labels = ["__meta_kubernetes_node_name"]
          target_label  = "__metrics_path__"
          regex         = "(.+)"
          replacement   = "/api/v1/nodes/$1/proxy/metrics/cadvisor"
        }
      }

      prometheus.scrape "kubernetes_nodes_cadvisor" {
        clustering {
          enabled = true
        }

        targets = discovery.relabel.kubernetes_nodes_cadvisor.output
        forward_to = [prometheus.relabel.kubernetes_nodes_cadvisor.receiver]

        scheme = "https"
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

        tls_config {
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        }
      }

      prometheus.relabel "kubernetes_nodes_cadvisor" {
        rule {
          action = "labelkeep"
          regex  = "__name__|instance|kubernetes_io_hostname|namespace|pod|container"
        }

        forward_to = [prometheus.remote_write.prometheus.receiver]
      }

      prometheus.operator.servicemonitors "servicemonitors" {
        clustering {
            enabled = true
        }
        forward_to = [prometheus.remote_write.prometheus.receiver]
      }

      prometheus.operator.podmonitors "podmonitors" {
        clustering {
            enabled = true
        }
        forward_to = [prometheus.remote_write.prometheus.receiver]
      }

      prometheus.operator.scrapeconfigs "scrapeconfigs" {
        clustering {
            enabled = true
        }
        forward_to = [prometheus.remote_write.prometheus.receiver]
      }

      prometheus.remote_write "prometheus" {
        endpoint {
          url = "http://prometheus-server.monitoring.svc.cluster.local/api/v1/write"
        }
        endpoint {
          url = "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
        }
      }

      otelcol.receiver.otlp "default" {
        http {}
        grpc {}

        output {
          logs  = [otelcol.processor.k8sattributes.default.input]
          traces  = [otelcol.processor.k8sattributes.default.input]
        }
      }

      otelcol.processor.k8sattributes "default" {
        extract {
          metadata = [
            "k8s.namespace.name",
            "k8s.pod.name",
            "k8s.container.name",
            "k8s.deployment.name",
            "k8s.statefulset.name",
            "k8s.daemonset.name",
            "k8s.replicaset.name",
          ]
        }

        output {
          logs = [otelcol.exporter.loki.loki.input]
          traces = [otelcol.exporter.otlp.tempo.input]
        }
      }

      otelcol.exporter.loki "loki" {
        forward_to = [loki.write.grafana_loki.receiver]
      }

      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "http://tempo.monitoring.svc.cluster.local:4317"
          tls {
            insecure = true
          }
        }
      }
