discovery.kubernetes "nodes" {
  role = "node"
}

discovery.relabel "kubernetes_nodes" {
  targets = discovery.kubernetes.nodes.targets

  rule {
    action = "labelmap"
    regex  = "__meta_kubernetes_node_label_(.+)"
  }

  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc:443"
  }

  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    target_label  = "__metrics_path__"
    regex         = "(.+)"
    replacement   = "/api/v1/nodes/$1/proxy/metrics"
  }
}

prometheus.scrape "kubernetes_nodes" {
  clustering {
    enabled = true
  }

  targets = discovery.relabel.kubernetes_nodes.output
  forward_to = [prometheus.relabel.kubernetes_nodes.receiver]

  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  }
}

prometheus.relabel "kubernetes_nodes" {
  rule {
    action = "labelkeep"
    regex  = "__name__|instance|kubernetes_io_hostname|namespace|pod|container|persistentvolumeclaim"
  }

  rule {
    action = "keep"
    source_labels = ["__name__"]
    regex = "kubelet_volume_stats.*"
  }

  forward_to = [prometheus.remote_write.prometheus.receiver]
}

discovery.relabel "kubernetes_nodes_cadvisor" {
  targets = discovery.kubernetes.nodes.targets

  rule {
    action = "labelmap"
    regex  = "__meta_kubernetes_node_label_(.+)"
  }

  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc:443"
  }

  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    target_label  = "__metrics_path__"
    regex         = "(.+)"
    replacement   = "/api/v1/nodes/$1/proxy/metrics/cadvisor"
  }
}

prometheus.scrape "kubernetes_nodes_cadvisor" {
  clustering {
    enabled = true
  }

  targets = discovery.relabel.kubernetes_nodes_cadvisor.output
  forward_to = [prometheus.relabel.kubernetes_nodes_cadvisor.receiver]

  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  }
}

prometheus.relabel "kubernetes_nodes_cadvisor" {
  rule {
    action = "labelkeep"
    regex  = "__name__|instance|kubernetes_io_hostname|namespace|pod|container"
  }

  forward_to = [prometheus.remote_write.prometheus.receiver]
}
